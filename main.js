// Ph√°t nh·∫°c sau t∆∞∆°ng t√°c ƒë·∫ßu ti√™n
["click", "touchstart"].forEach((evt) =>
    window.addEventListener(
        evt,
        () => {
            const audio = document.querySelector("audio");
            if (audio && audio.paused) {
                audio.play().catch((err) => console.warn("Kh√¥ng th·ªÉ ph√°t nh·∫°c:", err));
            }
        },
        { once: true }
    )
);

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    1,
    2000
);
camera.position.z = 600;

const renderer = new THREE.CSS3DRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const phrases = [
    "Sinh nh·∫≠t vui v·∫ª",
    "C∆∞·ªùi nhi·ªÅu l√™n n√®",
    "Ch√∫c b·∫°n m·ªôt ng√†y th·∫≠t ƒë·∫πp",
    "Th√™m tu·ªïi m·ªõi, th√™m y√™u ƒë·ªùi",
    "Ch√∫c b·∫°n ƒë·∫°p ƒë·ªï m·ªçi ch∆∞·ªõng ng·∫°i",
    "Ch√∫c b·∫°n h·∫°nh ph√∫c v√† th√†nh c√¥ng",
    "Ch√∫c b·∫°n lu√¥n vui v·∫ª",
    "Ch√∫c b·∫°n c√≥ m·ªôt nƒÉm th·∫≠t tuy·ªát v·ªùi",
    "M√¨nh tin b·∫°n, b·∫°n c≈©ng th·∫ø nha",
    "Ch√∫c b·∫°n kh·ªèe m·∫°nh, kh√¥ng thƒÉm b√°c sƒ© n·ªØa nha",
    "Ch√∫c b·∫°n c√≥ th·ªÉ ho√†n th√†nh m·ªçi d·ª± ƒë·ªãnh",
    "Ch√∫c b·∫°n t·ª´ gi·ªù ƒë·∫øn khi ra ri√™ng kh√¥ng c√≥ bi·∫øn n·ªØa"
];
const emojis = ["üéÇ", "üéâ", "‚ú®", "üéÅ", "üíñ", "ü•≥"];

// --- Shuffle logic ---
function shuffle(array) {
    const newArray = array.slice();
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

let shuffledPhrases = [];
let phraseIndex = 0;
function getNextPhrase() {
    if (phraseIndex >= shuffledPhrases.length) {
        shuffledPhrases = shuffle(phrases);
        phraseIndex = 0;
    }
    return shuffledPhrases[phraseIndex++];
}

// C≈©ng √°p d·ª•ng v·ªõi emoji
function getRandomEmoji() {
    return emojis[Math.floor(Math.random() * emojis.length)];
}

const minDistance = 800; // kho·∫£ng c√°ch t·ªëi thi·ªÉu t·ªõi camera
const maxDistance = 2000;
const spread = 2000;

// C√°c ph·∫ßn t·ª≠ bay s·∫µn
for (let i = 0; i < 100; i++) {
    const div = document.createElement("div");
    div.className = "text3d";
    const prefix = getRandomEmoji();
    const suffix = getRandomEmoji();
    div.innerText = `${prefix} ${getNextPhrase()} ${suffix}`;

    const object = new THREE.CSS3DObject(div);

    let position, distance;
    // L·∫∑p ƒë·∫øn khi t√¨m ƒë∆∞·ª£c v·ªã tr√≠ ƒë·ªß xa
    do {
        position = new THREE.Vector3(
            Math.random() * spread - spread / 2,
            Math.random() * spread - spread / 2,
            Math.random() * spread - spread / 2
        );
        distance = position.distanceTo(camera.position);
    } while (distance < minDistance || distance > maxDistance);

    object.position.copy(position);
    scene.add(object);
}

// Animate
function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();

// X·ª≠ l√Ω con quay h·ªìi chuy·ªÉn
window.addEventListener(
    "deviceorientation",
    (event) => {
        const beta = event.beta || 0;
        const gamma = event.gamma || 0;
        const x = THREE.MathUtils.degToRad(beta - 45);
        const y = THREE.MathUtils.degToRad(gamma);
        camera.rotation.x = x;
        camera.rotation.y = y;
    },
    true
);

// Resize
window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// Hi·ªáu ·ª©ng r∆°i t·ª´ng ch·ªØ m·ªói 500ms
setInterval(() => {
    const div = document.createElement("div");
    div.className = "text3d";
    const text = getNextPhrase();
    const prefix = getRandomEmoji();
    const suffix = getRandomEmoji();
    div.innerText = `${prefix} ${text} ${suffix}`;

    const object = new THREE.CSS3DObject(div);
    const vector = new THREE.Vector3();
    camera.getWorldDirection(vector);

    const zOffset = 1000;
    const pos = camera.position.clone().add(vector.multiplyScalar(zOffset));
    const spread = 400;

    object.position.set(
        pos.x + (Math.random() - 0.5) * spread,
        pos.y + 600,
        pos.z + (Math.random() - 0.5) * spread
    );

    scene.add(object);

    // R∆°i xu·ªëng
    let speed = 1 + Math.random();
    function fall() {
        object.position.y -= speed;
        if (object.position.y < -1000) {
            scene.remove(object);
            return;
        }
        requestAnimationFrame(fall);
    }
    fall();
}, 500);
